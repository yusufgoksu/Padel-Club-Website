/*
 * Padel Club Booking API
 * API for managing users, clubs, courts, and rentals in a padel club booking system.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Club;
import org.openapitools.client.model.ClubCreate;
import org.openapitools.client.model.Court;
import java.time.LocalDate;
import org.openapitools.client.model.Rental;
import org.openapitools.client.model.RentalCreate;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCreate;
import org.openapitools.client.model.UsersUserIDTokenPost200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clubsClubIDJsonGet
     * @param clubID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Club details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Club not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsClubIDJsonGetCall(String clubID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clubs/{clubID}/json"
            .replace("{" + "clubID" + "}", localVarApiClient.escapeString(clubID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clubsClubIDJsonGetValidateBeforeCall(String clubID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clubID' is set
        if (clubID == null) {
            throw new ApiException("Missing the required parameter 'clubID' when calling clubsClubIDJsonGet(Async)");
        }

        return clubsClubIDJsonGetCall(clubID, _callback);

    }

    /**
     * Get a club by ID
     * 
     * @param clubID  (required)
     * @return Club
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Club details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Club not found </td><td>  -  </td></tr>
     </table>
     */
    public Club clubsClubIDJsonGet(String clubID) throws ApiException {
        ApiResponse<Club> localVarResp = clubsClubIDJsonGetWithHttpInfo(clubID);
        return localVarResp.getData();
    }

    /**
     * Get a club by ID
     * 
     * @param clubID  (required)
     * @return ApiResponse&lt;Club&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Club details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Club not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Club> clubsClubIDJsonGetWithHttpInfo(String clubID) throws ApiException {
        okhttp3.Call localVarCall = clubsClubIDJsonGetValidateBeforeCall(clubID, null);
        Type localVarReturnType = new TypeToken<Club>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a club by ID (asynchronously)
     * 
     * @param clubID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Club details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Club not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsClubIDJsonGetAsync(String clubID, final ApiCallback<Club> _callback) throws ApiException {

        okhttp3.Call localVarCall = clubsClubIDJsonGetValidateBeforeCall(clubID, _callback);
        Type localVarReturnType = new TypeToken<Club>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clubsJsonGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsJsonGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clubs/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clubsJsonGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return clubsJsonGetCall(_callback);

    }

    /**
     * List all clubs
     * 
     * @return List&lt;Club&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clubs </td><td>  -  </td></tr>
     </table>
     */
    public List<Club> clubsJsonGet() throws ApiException {
        ApiResponse<List<Club>> localVarResp = clubsJsonGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all clubs
     * 
     * @return ApiResponse&lt;List&lt;Club&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clubs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Club>> clubsJsonGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = clubsJsonGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Club>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all clubs (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of clubs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsJsonGetAsync(final ApiCallback<List<Club>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clubsJsonGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Club>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clubsPost
     * @param clubCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created club </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsPostCall(ClubCreate clubCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clubCreate;

        // create path and map variables
        String localVarPath = "/clubs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clubsPostValidateBeforeCall(ClubCreate clubCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clubCreate' is set
        if (clubCreate == null) {
            throw new ApiException("Missing the required parameter 'clubCreate' when calling clubsPost(Async)");
        }

        return clubsPostCall(clubCreate, _callback);

    }

    /**
     * Create a new club
     * 
     * @param clubCreate  (required)
     * @return Club
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created club </td><td>  -  </td></tr>
     </table>
     */
    public Club clubsPost(ClubCreate clubCreate) throws ApiException {
        ApiResponse<Club> localVarResp = clubsPostWithHttpInfo(clubCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new club
     * 
     * @param clubCreate  (required)
     * @return ApiResponse&lt;Club&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created club </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Club> clubsPostWithHttpInfo(ClubCreate clubCreate) throws ApiException {
        okhttp3.Call localVarCall = clubsPostValidateBeforeCall(clubCreate, null);
        Type localVarReturnType = new TypeToken<Club>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new club (asynchronously)
     * 
     * @param clubCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created club </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clubsPostAsync(ClubCreate clubCreate, final ApiCallback<Club> _callback) throws ApiException {

        okhttp3.Call localVarCall = clubsPostValidateBeforeCall(clubCreate, _callback);
        Type localVarReturnType = new TypeToken<Club>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for courtsCourtIDJsonGet
     * @param courtID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Court details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Court not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call courtsCourtIDJsonGetCall(String courtID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/courts/{courtID}/json"
            .replace("{" + "courtID" + "}", localVarApiClient.escapeString(courtID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call courtsCourtIDJsonGetValidateBeforeCall(String courtID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtID' is set
        if (courtID == null) {
            throw new ApiException("Missing the required parameter 'courtID' when calling courtsCourtIDJsonGet(Async)");
        }

        return courtsCourtIDJsonGetCall(courtID, _callback);

    }

    /**
     * Get a court by ID
     * 
     * @param courtID  (required)
     * @return Court
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Court details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Court not found </td><td>  -  </td></tr>
     </table>
     */
    public Court courtsCourtIDJsonGet(String courtID) throws ApiException {
        ApiResponse<Court> localVarResp = courtsCourtIDJsonGetWithHttpInfo(courtID);
        return localVarResp.getData();
    }

    /**
     * Get a court by ID
     * 
     * @param courtID  (required)
     * @return ApiResponse&lt;Court&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Court details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Court not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Court> courtsCourtIDJsonGetWithHttpInfo(String courtID) throws ApiException {
        okhttp3.Call localVarCall = courtsCourtIDJsonGetValidateBeforeCall(courtID, null);
        Type localVarReturnType = new TypeToken<Court>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a court by ID (asynchronously)
     * 
     * @param courtID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Court details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Court not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call courtsCourtIDJsonGetAsync(String courtID, final ApiCallback<Court> _callback) throws ApiException {

        okhttp3.Call localVarCall = courtsCourtIDJsonGetValidateBeforeCall(courtID, _callback);
        Type localVarReturnType = new TypeToken<Court>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for courtsJsonGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of courts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call courtsJsonGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/courts/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call courtsJsonGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return courtsJsonGetCall(_callback);

    }

    /**
     * List all courts
     * 
     * @return List&lt;Court&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of courts </td><td>  -  </td></tr>
     </table>
     */
    public List<Court> courtsJsonGet() throws ApiException {
        ApiResponse<List<Court>> localVarResp = courtsJsonGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all courts
     * 
     * @return ApiResponse&lt;List&lt;Court&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of courts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Court>> courtsJsonGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = courtsJsonGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Court>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all courts (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of courts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call courtsJsonGetAsync(final ApiCallback<List<Court>> _callback) throws ApiException {

        okhttp3.Call localVarCall = courtsJsonGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Court>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rentalsAvailableGet
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comma-separated available hours </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsAvailableGetCall(String clubId, String courtId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rentals/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clubId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clubId", clubId));
        }

        if (courtId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("courtId", courtId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentalsAvailableGetValidateBeforeCall(String clubId, String courtId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clubId' is set
        if (clubId == null) {
            throw new ApiException("Missing the required parameter 'clubId' when calling rentalsAvailableGet(Async)");
        }

        // verify the required parameter 'courtId' is set
        if (courtId == null) {
            throw new ApiException("Missing the required parameter 'courtId' when calling rentalsAvailableGet(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling rentalsAvailableGet(Async)");
        }

        return rentalsAvailableGetCall(clubId, courtId, date, _callback);

    }

    /**
     * Get available hours for a court
     * 
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comma-separated available hours </td><td>  -  </td></tr>
     </table>
     */
    public String rentalsAvailableGet(String clubId, String courtId, LocalDate date) throws ApiException {
        ApiResponse<String> localVarResp = rentalsAvailableGetWithHttpInfo(clubId, courtId, date);
        return localVarResp.getData();
    }

    /**
     * Get available hours for a court
     * 
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comma-separated available hours </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> rentalsAvailableGetWithHttpInfo(String clubId, String courtId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = rentalsAvailableGetValidateBeforeCall(clubId, courtId, date, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available hours for a court (asynchronously)
     * 
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Comma-separated available hours </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsAvailableGetAsync(String clubId, String courtId, LocalDate date, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentalsAvailableGetValidateBeforeCall(clubId, courtId, date, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rentalsClubClubIdCourtCourtIdGet
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsClubClubIdCourtCourtIdGetCall(String clubId, String courtId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rentals/club/{clubId}/court/{courtId}"
            .replace("{" + "clubId" + "}", localVarApiClient.escapeString(clubId.toString()))
            .replace("{" + "courtId" + "}", localVarApiClient.escapeString(courtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentalsClubClubIdCourtCourtIdGetValidateBeforeCall(String clubId, String courtId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clubId' is set
        if (clubId == null) {
            throw new ApiException("Missing the required parameter 'clubId' when calling rentalsClubClubIdCourtCourtIdGet(Async)");
        }

        // verify the required parameter 'courtId' is set
        if (courtId == null) {
            throw new ApiException("Missing the required parameter 'courtId' when calling rentalsClubClubIdCourtCourtIdGet(Async)");
        }

        return rentalsClubClubIdCourtCourtIdGetCall(clubId, courtId, date, _callback);

    }

    /**
     * Get rentals for a specific club and court
     * 
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (optional)
     * @return List&lt;Rental&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public List<Rental> rentalsClubClubIdCourtCourtIdGet(String clubId, String courtId, LocalDate date) throws ApiException {
        ApiResponse<List<Rental>> localVarResp = rentalsClubClubIdCourtCourtIdGetWithHttpInfo(clubId, courtId, date);
        return localVarResp.getData();
    }

    /**
     * Get rentals for a specific club and court
     * 
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (optional)
     * @return ApiResponse&lt;List&lt;Rental&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Rental>> rentalsClubClubIdCourtCourtIdGetWithHttpInfo(String clubId, String courtId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = rentalsClubClubIdCourtCourtIdGetValidateBeforeCall(clubId, courtId, date, null);
        Type localVarReturnType = new TypeToken<List<Rental>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get rentals for a specific club and court (asynchronously)
     * 
     * @param clubId  (required)
     * @param courtId  (required)
     * @param date  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsClubClubIdCourtCourtIdGetAsync(String clubId, String courtId, LocalDate date, final ApiCallback<List<Rental>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentalsClubClubIdCourtCourtIdGetValidateBeforeCall(clubId, courtId, date, _callback);
        Type localVarReturnType = new TypeToken<List<Rental>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rentalsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rentals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentalsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return rentalsGetCall(_callback);

    }

    /**
     * List all rentals
     * 
     * @return List&lt;Rental&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public List<Rental> rentalsGet() throws ApiException {
        ApiResponse<List<Rental>> localVarResp = rentalsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all rentals
     * 
     * @return ApiResponse&lt;List&lt;Rental&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Rental>> rentalsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rentalsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Rental>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all rentals (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsGetAsync(final ApiCallback<List<Rental>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentalsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Rental>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rentalsPost
     * @param rentalCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created rental </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsPostCall(RentalCreate rentalCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rentalCreate;

        // create path and map variables
        String localVarPath = "/rentals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentalsPostValidateBeforeCall(RentalCreate rentalCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rentalCreate' is set
        if (rentalCreate == null) {
            throw new ApiException("Missing the required parameter 'rentalCreate' when calling rentalsPost(Async)");
        }

        return rentalsPostCall(rentalCreate, _callback);

    }

    /**
     * Create a new rental
     * 
     * @param rentalCreate  (required)
     * @return Rental
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created rental </td><td>  -  </td></tr>
     </table>
     */
    public Rental rentalsPost(RentalCreate rentalCreate) throws ApiException {
        ApiResponse<Rental> localVarResp = rentalsPostWithHttpInfo(rentalCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new rental
     * 
     * @param rentalCreate  (required)
     * @return ApiResponse&lt;Rental&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created rental </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rental> rentalsPostWithHttpInfo(RentalCreate rentalCreate) throws ApiException {
        okhttp3.Call localVarCall = rentalsPostValidateBeforeCall(rentalCreate, null);
        Type localVarReturnType = new TypeToken<Rental>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new rental (asynchronously)
     * 
     * @param rentalCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created rental </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rentalsPostAsync(RentalCreate rentalCreate, final ApiCallback<Rental> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentalsPostValidateBeforeCall(rentalCreate, _callback);
        Type localVarReturnType = new TypeToken<Rental>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersByEmailGet
     * @param email  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersByEmailGetCall(String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/by-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersByEmailGetValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling usersByEmailGet(Async)");
        }

        return usersByEmailGetCall(email, _callback);

    }

    /**
     * Get a user by email
     * 
     * @param email  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public User usersByEmailGet(String email) throws ApiException {
        ApiResponse<User> localVarResp = usersByEmailGetWithHttpInfo(email);
        return localVarResp.getData();
    }

    /**
     * Get a user by email
     * 
     * @param email  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersByEmailGetWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = usersByEmailGetValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by email (asynchronously)
     * 
     * @param email  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersByEmailGetAsync(String email, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersByEmailGetValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersGetCall(_callback);

    }

    /**
     * List all users
     * 
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of users </td><td>  -  </td></tr>
     </table>
     */
    public List<User> usersGet() throws ApiException {
        ApiResponse<List<User>> localVarResp = usersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all users
     * 
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> usersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all users (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPost
     * @param userCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostCall(UserCreate userCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCreate;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPostValidateBeforeCall(UserCreate userCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userCreate' is set
        if (userCreate == null) {
            throw new ApiException("Missing the required parameter 'userCreate' when calling usersPost(Async)");
        }

        return usersPostCall(userCreate, _callback);

    }

    /**
     * Create a new user
     * 
     * @param userCreate  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
     </table>
     */
    public User usersPost(UserCreate userCreate) throws ApiException {
        ApiResponse<User> localVarResp = usersPostWithHttpInfo(userCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new user
     * 
     * @param userCreate  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersPostWithHttpInfo(UserCreate userCreate) throws ApiException {
        okhttp3.Call localVarCall = usersPostValidateBeforeCall(userCreate, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new user (asynchronously)
     * 
     * @param userCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostAsync(UserCreate userCreate, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPostValidateBeforeCall(userCreate, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIDGet
     * @param userID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIDGetCall(String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIDGetValidateBeforeCall(String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling usersUserIDGet(Async)");
        }

        return usersUserIDGetCall(userID, _callback);

    }

    /**
     * Get a user by ID
     * 
     * @param userID  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public User usersUserIDGet(String userID) throws ApiException {
        ApiResponse<User> localVarResp = usersUserIDGetWithHttpInfo(userID);
        return localVarResp.getData();
    }

    /**
     * Get a user by ID
     * 
     * @param userID  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> usersUserIDGetWithHttpInfo(String userID) throws ApiException {
        okhttp3.Call localVarCall = usersUserIDGetValidateBeforeCall(userID, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by ID (asynchronously)
     * 
     * @param userID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIDGetAsync(String userID, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIDGetValidateBeforeCall(userID, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIDRentalsGet
     * @param userID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals for the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIDRentalsGetCall(String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userID}/rentals"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIDRentalsGetValidateBeforeCall(String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling usersUserIDRentalsGet(Async)");
        }

        return usersUserIDRentalsGetCall(userID, _callback);

    }

    /**
     * List rentals for a user
     * 
     * @param userID  (required)
     * @return List&lt;Rental&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals for the user </td><td>  -  </td></tr>
     </table>
     */
    public List<Rental> usersUserIDRentalsGet(String userID) throws ApiException {
        ApiResponse<List<Rental>> localVarResp = usersUserIDRentalsGetWithHttpInfo(userID);
        return localVarResp.getData();
    }

    /**
     * List rentals for a user
     * 
     * @param userID  (required)
     * @return ApiResponse&lt;List&lt;Rental&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals for the user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Rental>> usersUserIDRentalsGetWithHttpInfo(String userID) throws ApiException {
        okhttp3.Call localVarCall = usersUserIDRentalsGetValidateBeforeCall(userID, null);
        Type localVarReturnType = new TypeToken<List<Rental>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rentals for a user (asynchronously)
     * 
     * @param userID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array of rentals for the user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIDRentalsGetAsync(String userID, final ApiCallback<List<Rental>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIDRentalsGetValidateBeforeCall(userID, _callback);
        Type localVarReturnType = new TypeToken<List<Rental>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUserIDTokenPost
     * @param userID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIDTokenPostCall(String userID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userID}/token"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUserIDTokenPostValidateBeforeCall(String userID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling usersUserIDTokenPost(Async)");
        }

        return usersUserIDTokenPostCall(userID, _callback);

    }

    /**
     * Generate a token for a user
     * 
     * @param userID  (required)
     * @return UsersUserIDTokenPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated token </td><td>  -  </td></tr>
     </table>
     */
    public UsersUserIDTokenPost200Response usersUserIDTokenPost(String userID) throws ApiException {
        ApiResponse<UsersUserIDTokenPost200Response> localVarResp = usersUserIDTokenPostWithHttpInfo(userID);
        return localVarResp.getData();
    }

    /**
     * Generate a token for a user
     * 
     * @param userID  (required)
     * @return ApiResponse&lt;UsersUserIDTokenPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersUserIDTokenPost200Response> usersUserIDTokenPostWithHttpInfo(String userID) throws ApiException {
        okhttp3.Call localVarCall = usersUserIDTokenPostValidateBeforeCall(userID, null);
        Type localVarReturnType = new TypeToken<UsersUserIDTokenPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a token for a user (asynchronously)
     * 
     * @param userID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUserIDTokenPostAsync(String userID, final ApiCallback<UsersUserIDTokenPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUserIDTokenPostValidateBeforeCall(userID, _callback);
        Type localVarReturnType = new TypeToken<UsersUserIDTokenPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
