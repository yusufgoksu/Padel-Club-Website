/*
 * Padel Club Booking API
 * API for managing users, clubs, courts, and rentals in a padel club booking system.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Club;
import org.openapitools.client.model.ClubCreate;
import org.openapitools.client.model.Court;
import java.time.LocalDate;
import org.openapitools.client.model.Rental;
import org.openapitools.client.model.RentalCreate;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCreate;
import org.openapitools.client.model.UsersUserIDTokenPost200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get a club by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clubsClubIDJsonGetTest() throws ApiException {
        String clubID = null;
        Club response = api.clubsClubIDJsonGet(clubID);
        // TODO: test validations
    }

    /**
     * List all clubs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clubsJsonGetTest() throws ApiException {
        List<Club> response = api.clubsJsonGet();
        // TODO: test validations
    }

    /**
     * Create a new club
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clubsPostTest() throws ApiException {
        ClubCreate clubCreate = null;
        Club response = api.clubsPost(clubCreate);
        // TODO: test validations
    }

    /**
     * Get a court by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void courtsCourtIDJsonGetTest() throws ApiException {
        String courtID = null;
        Court response = api.courtsCourtIDJsonGet(courtID);
        // TODO: test validations
    }

    /**
     * List all courts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void courtsJsonGetTest() throws ApiException {
        List<Court> response = api.courtsJsonGet();
        // TODO: test validations
    }

    /**
     * Get available hours for a court
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rentalsAvailableGetTest() throws ApiException {
        String clubId = null;
        String courtId = null;
        LocalDate date = null;
        String response = api.rentalsAvailableGet(clubId, courtId, date);
        // TODO: test validations
    }

    /**
     * Get rentals for a specific club and court
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rentalsClubClubIdCourtCourtIdGetTest() throws ApiException {
        String clubId = null;
        String courtId = null;
        LocalDate date = null;
        List<Rental> response = api.rentalsClubClubIdCourtCourtIdGet(clubId, courtId, date);
        // TODO: test validations
    }

    /**
     * List all rentals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rentalsGetTest() throws ApiException {
        List<Rental> response = api.rentalsGet();
        // TODO: test validations
    }

    /**
     * Create a new rental
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rentalsPostTest() throws ApiException {
        RentalCreate rentalCreate = null;
        Rental response = api.rentalsPost(rentalCreate);
        // TODO: test validations
    }

    /**
     * Get a user by email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersByEmailGetTest() throws ApiException {
        String email = null;
        User response = api.usersByEmailGet(email);
        // TODO: test validations
    }

    /**
     * List all users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        List<User> response = api.usersGet();
        // TODO: test validations
    }

    /**
     * Create a new user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersPostTest() throws ApiException {
        UserCreate userCreate = null;
        User response = api.usersPost(userCreate);
        // TODO: test validations
    }

    /**
     * Get a user by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIDGetTest() throws ApiException {
        String userID = null;
        User response = api.usersUserIDGet(userID);
        // TODO: test validations
    }

    /**
     * List rentals for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIDRentalsGetTest() throws ApiException {
        String userID = null;
        List<Rental> response = api.usersUserIDRentalsGet(userID);
        // TODO: test validations
    }

    /**
     * Generate a token for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIDTokenPostTest() throws ApiException {
        String userID = null;
        UsersUserIDTokenPost200Response response = api.usersUserIDTokenPost(userID);
        // TODO: test validations
    }

}
