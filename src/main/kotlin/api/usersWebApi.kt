package api

import models.User
import models.UserInput
import services.UserServices

import org.http4k.core.*
import org.http4k.core.Method.*
import org.http4k.format.KotlinxSerialization.auto
import org.http4k.lens.*
import org.http4k.routing.*

fun usersWebApi(): RoutingHttpHandler {

    val userLens      = Body.auto<User>().toLens()
    val userInputLens = Body.auto<UserInput>().toLens()
    val usersLens     = Body.auto<List<User>>().toLens()
    val userIdPath    = Path.int().of("userId")
    val emailQuery    = Query.string().required("email")

    return routes(
        // 1) List all users
        "/api/users" bind GET to {
            Response(Status.OK).with(usersLens of UserServices.getAllUsers())
        },

        // âœ… 2) Create new user with autogenerated ID (uses UserInput)
        "/api/users" bind POST to { req ->
            try {
                val userInput = userInputLens(req)
                val created = UserServices.addUser(userInput.name, userInput.email)
                Response(Status.CREATED).with(userLens of created)
            } catch (e: IllegalArgumentException) {
                Response(Status.BAD_REQUEST).body(e.message ?: "Invalid input")
            }
        },

        // 3) Get one user by ID
        "/api/users/{userId}" bind GET to { req ->
            val uId = userIdPath(req)
            val user = UserServices.getUserById(uId)
                ?: return@to Response(Status.NOT_FOUND).body("User not found")
            Response(Status.OK).with(userLens of user)
        },

        // 4) List rentals for a given user
        "/api/users/{userId}/rentals" bind GET to { req ->
            val uId = userIdPath(req)
            val list = services.RentalServices.getRentalsForUser(uId)
            if (list.isEmpty()) {
                Response(Status.NOT_FOUND).body("No rentals found for user")
            } else {
                Response(Status.OK).with(Body.auto<List<models.Rental>>().toLens() of list)
            }
        },

        // 5) Get a user by email
        "/api/users/by-email" bind GET to { req ->
            val email = emailQuery(req)
            val user = UserServices.getUserByEmail(email)
                ?: return@to Response(Status.NOT_FOUND).body("User not found")
            Response(Status.OK).with(userLens of user)
        }
    )
}